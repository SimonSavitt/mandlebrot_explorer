#include "config.h"

const double mandlebrot::ZOOM_FACTOR   = 1.1;
const double mandlebrot::SCROLL_FACTOR = 1.1;

//pixlWidth must be divisible by num threads
const int mandlebrot::pixelWidth  = 750;
const int mandlebrot::NUM_THREADS =   5;

const int    mandlebrot::nIter_def =  375;
const double mandlebrot::x_min_def = -2.5;
const double mandlebrot::x_max_def =  2.5;
const double mandlebrot::y_min_def = -2.5;
const double mandlebrot::y_max_def =  2.5; 

//a big bailout radius makes calculations slower but improves the 
//color smoothening algorithm
const int    mandlebrot::BAILOUT_RADIUS = 2 << 10;

//Color palette in RGB
//Top row is min iterations to escape
//Bottom row is max iterations to escape
//will either be rendered with a histogram or modulo depening on view
//each row is an RGB triple

const int    mandlebrot::RED           = 0;
const int    mandlebrot::GREEN         = 1;
const int    mandlebrot::BLUE          = 2;

//you can add your own color map by following the templates shown below
//each map should have a set of RGB triples
//The first value is the furthest from the set, wheras the last would be hugging the set
//The set itself is fixed as black
const std::vector< std::vector< std::vector < unsigned char> > > mandlebrot::color_maps = 
{
    //My custom coloring scheme. Could be better but its something
    //to start with
    {
        { 0x30, 0xFC, 0x9E }, //teal
        { 0x20, 0xDF, 0xCC }, //sky blue
        { 0x3A, 0x91, 0xE8 }, //blue
        { 0xD4, 0x26, 0xE8 }, //magenta
        { 0xE4, 0x36, 0x48 }, //red
        { 0xFF, 0x5E, 0x00 }, //orange
        { 0xF5, 0xEF, 0x47 }, //yellow
        { 0xE0, 0xE0, 0xE0 }, //nearly white
    },
    //Wikipedia's color scheme. Looks very nice with modulo but
    //pretty lame with histogram coloring
    {
        { 0x42, 0x1F, 0x0F }, // brown 3
        { 0x19, 0x07, 0x1A }, // dark violett
        { 0x09, 0x01, 0x2F }, // darkest blue
        { 0x04, 0x04, 0x49 }, // blue 5
        { 0x00, 0x07, 0x64 }, // blue 4
        { 0x0C, 0x2C, 0x7A }, // blue 3
        { 0x18, 0x52, 0xB1 }, // blue 2
        { 0x39, 0x7D, 0xD1 }, // blue 1
        { 0x86, 0xB5, 0xE5 }, // blue 0
        { 0xDD, 0xEC, 0xF8 }, // lightest blue
        { 0xF1, 0xE9, 0xBF }, // lightest yellow
        { 0xF8, 0xC9, 0x5F }, // light yellow
        { 0xFF, 0xAA, 0x00 }, // dirty yellow
        { 0xCC, 0x80, 0x00 }, // brown 0
        { 0x99, 0x57, 0x00 }, // brown 1
        { 0x6A, 0x34, 0x03 }, // brown 2
    },
};